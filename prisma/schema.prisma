datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  queues        Queue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Song {
  id        Int      @id @default(autoincrement())
  spotifyId String
  title     String
  artist    String
  duration  Int
  createdAt DateTime @default(now())
  queues    Queue[]
}

model Queue {
  id        Int      @id @default(autoincrement())
  songId    Int
  userId    String
  bidAmount Float    @default(0.0)
  createdAt DateTime @default(now())
  isPlaying Boolean  @default(false)
  song      Song     @relation(fields: [songId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  bids      Bid[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Bid {
  id        Int      @id @default(autoincrement())
  queueId   Int
  amount    Float
  createdAt DateTime @default(now())
  queue     Queue    @relation(fields: [queueId], references: [id])
}
